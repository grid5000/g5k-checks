#!/usr/bin/env ruby
# frozen_string_literal: true

begin
  # Hard-coded path for deployed bundle...
  require '/usr/lib/ruby/bundles/g5k-checks/bundler/setup'
rescue LoadError
  # puts "Running in development mode, dependencies load path managed by bundler"
end

# Load libraries from source tree if possible
$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')

require 'optparse'
require 'optparse/time'

require 'g5kchecks'
require 'g5kchecks/utils/configparser'

require 'syslog'

# Options parsing

$hashconf = {}

USAGE = "Usage: #{$PROGRAM_NAME} [options]"

optparse = OptionParser.new(USAGE) do |opts|
  opts.banner = ' argv...'

  opts.on_tail('--help', 'Show this message') { puts opts; exit }

  $hashconf['conffile'] = '/etc/g5k-checks.conf'
  opts.on('-c', '--config-file <PATH>', "Specify the path to the g5k-checks configuration files [default: '#{$hashconf['conffile']}']") do |conf|
    $hashconf['conffile'] = conf
  end

  $hashconf['output_dir'] = '/var/lib/g5kchecks/'
  opts.on('-o', '--output-dir <PATH>', "Specify the path where g5k-checks puts output files [default: #{$hashconf['output_dir']}]") do |outputdir|
    $hashconf['output_dir'] = outputdir
  end

  $hashconf['mode'] = 'oar_checks'
  opts.on('-m', '--mode MODE', "Specify the functional mode (oar_checks, api, jenkins) [default: 'oar_checks']") do |mode|
    $hashconf['mode'] = mode
  end

  # array
  opts.on('-e', '--enable-tests[=TEST1,TEST2]', Array, 'Enable specific tests') { |testlist| $hashconf['enabletestlist'] = testlist }

  # array
  opts.on('-r', '--remove-tests[=TEST1,TEST2] (default=all)', Array, 'Remove specific tests') do |rm|
    $hashconf['removetestlist'] = rm
  end

  opts.on('-u', '--url-api <URL>', 'Specify the URL where g5k-checks retrieves API information') do |u|
    $hashconf['urlapi'] = u
  end

  opts.on('-b', '--branch <branch>', 'Specify the git branch where g5k-checks retrieves API information (will be added to URI)') do |b|
    $hashconf['branch'] = b
  end

  opts.on('-l', '--api-login user', 'Specify the user to login with on the API') do |user|
    $hashconf['apiuser'] = user
  end

  opts.on('-p', '--api-passwd passwd', 'Specify the password to login with on the API') do |passwd|
    $hashconf['apipasswd'] = passwd
  end

  $hashconf['no-wait-deploy'] = false
  opts.on_tail('-k', '--no-wait-deploy', "Do not check status/wait for the end of the deployment of the node [default: #{$hashconf['no-wait-deploy']}]") do
    $hashconf['no-wait-deploy'] = true
  end

  $hashconf['verbose'] = false
  opts.on_tail('-v', '--verbose', "Enable verbose mode [default: #{$hashconf['verbose']}]") do
    $hashconf['verbose'] = true
  end

  $hashconf['debug'] = false
  opts.on_tail('-d', '--debug', "Enable debug mode (shows all ohai plugins outputs) [default: #{$hashconf['debug']}]") do
    $hashconf['debug'] = true
  end
end

begin
  optparse.parse!
rescue OptionParser::InvalidOption => e
  warn e.to_s
  exit 1
end

$hashconf = G5kChecks::ConfigParser.new($hashconf['conffile']).parse.merge!($hashconf)

G5kChecks::G5kChecks.new.run($hashconf)

# Send fails to Syslog
Syslog.open('g5k-checks', Syslog::LOG_ODELAY, Syslog::LOG_DAEMON)
Dir.foreach($hashconf['output_dir']) do |f|
  next if (f == '.') || (f == '..')

  Syslog.log(Syslog::LOG_INFO, File.read($hashconf['output_dir'] + '/' + f))
end
Syslog.close
